name: build-and-test

on:
  push:
  schedule:
    - cron: 0 0 * * *
  workflow_dispatch:

jobs:
  build-and-test:
    if: ${{ github.event_name != 'push' || github.ref_name == github.event.repository.default_branch }}
    runs-on: ubuntu-22.04
    container: 
      image: ros:humble
    strategy:
      fail-fast: false
      matrix:
        rosdistro:
          - humble
        include:
          - rosdistro: humble
            container: ros:humble
            build-depends-repos: build_depends.repos
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Show disk space before the tasks
        run: df -h

      - name: Remove exec_depend
        uses: autowarefoundation/autoware-github-actions/remove-exec-depend@v1

      - name: Get self packages
        id: get-self-packages
        uses: autowarefoundation/autoware-github-actions/get-self-packages@v1

      - name: Build
        if: ${{ steps.get-self-packages.outputs.self-packages != '' }}
        env:
          rosdistro: ${{ matrix.rosdistro }}
          target-packages: ${{ steps.get-self-packages.outputs.self-packages }}
          build-depends-repos: ${{ matrix.build-depends-repos }}
          build-pre-commands: sudo apt install libboost-filesystem-dev libboost-thread-dev
        shell: bash
        run: |
          echo "target packages: ${{ env.target-packages }}"
          shopt -s extglob
          mkdir -p ./dependency_ws/build_pkg
          cp -r !(dependency_ws) ./dependency_ws/build_pkg
          rm -rf !(dependency_ws)
          sudo apt-get -yqq update
          sudo apt-get -yqq install python3-pip libboost-system-dev
          if [ "${{ env.build-depends-repos }}" != "" ]; then
            git config --global url."https://${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
            vcs import ./dependency_ws < ./dependency_ws/build_pkg/${{ env.build-depends-repos }}
          fi
          package_paths=$(colcon list -p --packages-above-and-dependencies ${{ env.target-packages }} --base-paths . dependency_ws)
          sudo apt-get -yqq update
          if [ "${{ env.include-eol-distros }}" = "true" ]; then
            rosdep update --include-eol-distros
          else
            rosdep update
          fi
          DEBIAN_FRONTEND=noninteractive rosdep install -yqq --from-paths ${package_paths} --ignore-src --rosdistro ${{ env.rosdistro }}
          colcon mixin add default https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml || true
          colcon mixin update default
          . /opt/ros/${{ env.rosdistro }}/setup.sh
          cat /etc/nsswitch.conf
          sed -e 's#hosts:\(.*\)dns\(.*\)#hosts:\1\2#g' -i.bak /etc/nsswitch.conf
          cat /etc/nsswitch.conf
          MAKEFLAGS="${{ env.makeflags }}"
          echo "MAKEFLAGS=$MAKEFLAGS"  # for debugging
          ${{ env.build-pre-command }} colcon build ${{ env.colcon-parallel-workers-flag }} \
            --event-handlers console_cohesion+ \
            --packages-above-and-dependencies ${{ env.target-packages }} \
            --cmake-args -DCMAKE_BUILD_TYPE=${{ env.cmake-build-type }} \
            --mixin coverage-gcc coverage-pytest compile-commands
          mv /etc/nsswitch.conf.bak /etc/nsswitch.conf
          cat /etc/nsswitch.conf
          echo  "finished building"

      - name: Test
        if: ${{ steps.get-self-packages.outputs.self-packages != '' }}
        env:
          rosdistro: ${{ matrix.rosdistro }}
          target-packages: ${{ steps.get-self-packages.outputs.self-packages }}
          build-depends-repos: ${{ matrix.build-depends-repos }}
        shell: bash
        run: |
          echo "Running tests for target packages: ${{ env.target-packages }}"
          . /opt/ros/${{ env.rosdistro }}/setup.sh

          sudo apt-get -yqq update
          sudo apt-get -yqq install \
            lcov \
            python3-pip \
            python3-colcon-coveragepy-result \
            python3-colcon-lcov-result \
            python3-pytest-cov
          # Initialize lcov counters
          colcon lcov-result --zero-counters --verbose --packages-above ${{ env.target-packages }}

          # Generate initial lcov results
          colcon lcov-result --initial --verbose --packages-above ${{ env.target-packages }}

          # Run tests with coverage mixin
          colcon test --event-handlers console_cohesion+ \
            --mixin coverage-pytest \
            --packages-above ${{ env.target-packages }} \
            --executor sequential \
            --return-code-on-test-failure

          # Generate lcov results and filter test files
          colcon lcov-result --verbose --filter "*/test/*" --packages-above ${{ env.target-packages }} || true

          # Generate coverage.py results
          colcon coveragepy-result --verbose --packages-above ${{ env.target-packages }} || true

          # Check if coverage reports exist
          if [ -f lcov/total_coverage.info ]; then
            echo "lcov coverage report generated: lcov/total_coverage.info"
          else
            echo "No lcov coverage report found."
          fi

          if [ -f coveragepy/.coverage ]; then
            echo "coverage.py report generated: coveragepy/.coverage"
          else
            echo "No coverage.py report found."
          fi


      - name: Upload coverage to CodeCov
        if: ${{ steps.test.outputs.coverage-report-files != '' }}
        uses: codecov/codecov-action@v4
        with:
          files: ${{ steps.test.outputs.coverage-report-files }}
          fail_ci_if_error: false
          verbose: true
          flags: total

      - name: Show disk space after the tasks
        run: df -h
